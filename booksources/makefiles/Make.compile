# -*- makefile -*-
################################################################
################################################################
####
#### This Makefile belong with the sources
#### for Introduction to High-Performance Scientific Computing
#### by Victor Eijkhout
#### copyright 2010-2022
####
#### basic make compile rules
####
################################################################
################################################################

# disable stupid default application building
MAKEFLAGS += --no-builtin-rules
% : %.o

OMPFLAGS_intel    = -g -qopenmp
OMPFLAGS_gcc      = -ggdb -fopenmp
OMPFLAGS_clang    = -fopenmp
OMPFLAGS = ${OMPFLAGS_${TACC_FAMILY_COMPILER}}

info ::
	@echo "================ Compile rules:"
	@echo "make PROGRAM (in: ${PROGRAMS} ${APPS})"
	@echo "    [ OPTLEVEL=0/1/2, default:${OPTLEVEL} ]"
	@echo "    [ ECHO=0/1 for cmd line display ]"
OPTLEVEL = 2

info ::
	@echo "    [ EXTRA_OPTIONS=... ] [ INCLUDES=... ]"

ifdef TACC_TAU_DIR
  C_COMPILER = tau_cc.sh
  CXX_COMPILER = tau_cxx.sh
  F_COMPILER = tau_f90.sh
  MPI_C_COMPILER = tau_cc.sh
  MPI_CXX_COMPILER = tau_cxx.sh
  MPI_F_COMPILER = tau_f90.sh
else

  ## non-TAU compilation
  CSTANDARD = 99
ifdef TACC_CXX
  CXX_COMPILER = ${TACC_CXX} \
	-g -O${OPTLEVEL} -std=c++${CPPSTANDARD} ${CXXFLAGS_${TACC_FAMILY_COMPILER}}
else
  C_COMPILER_intel   = icc
  C_COMPILER_gcc     = gcc
  C_COMPILER_clang   = clang
  C_COMPILER_oneapi  = icx
  CFLAGS = -g -O${OPTLEVEL} -std=c${CSTANDARD}
  C_COMPILER = ${C_COMPILER_${TACC_FAMILY_COMPILER}
endif
  MPI_C_COMPILER = mpicc

  CPPSTANDARD = 20
  CXXFLAGS_gcc = -Wno-psabi
ifdef TACC_CXX
  CXX_COMPILER = ${TACC_CXX} \
	-g -O${OPTLEVEL} -std=c++${CPPSTANDARD} ${CXXFLAGS_${TACC_FAMILY_COMPILER}}
else
  CXX_COMPILER_intel   = icpc
  CXX_COMPILER_gcc     = g++
  CXX_COMPILER_clang   = clang++
  CXX_COMPILER_oneapi  = icpx
  CXXFLAGS = -g -O${OPTLEVEL} -std=c++17 ${CXXFLAGS_${TACC_FAMILY_COMPILER}}
endif
  MPI_CXX_COMPILER = mpicxx

  F_COMPILER_intel   = ifort
  F_COMPILER_gcc     = gfortran
  F_COMPILER_clang   = gfortran
  F_COMPILER_oneapi  = gfortran
  FFLAGS = -g -O${OPTLEVEL}
  F_COMPILER = ${F_COMPILER_${TACC_FAMILY_COMPILER}}
  MPI_F_COMPILER = mpif90

  ifeq "${MODE}" "mpi"
    C_COMPILER   = ${MPI_COMPILER}
    CXX_COMPILER = ${MPI_CXX_COMPILER}
    F_COMPILER   = ${MPI_F_COMPILER}
  endif

endif
CLINKER   = ${C_COMPILER}
FLINKER   = ${F_COMPILER}
CXXLINKER = ${CXX_COMPILER} -Wl,-demangle
LINKER    = ${${LANGUAGE}LINKER}

ifeq "${MODE}" "omp"
  CFLAGS += ${OMPFLAGS} 
  CXXFLAGS += ${OMPFLAGS} 
  FFLAGS += ${OMPFLAGS} 
  LINK_FLAGS += ${OMPFLAGS}
endif

##
## Module detection
##
.PHONY: modules
modules :
	@needs="" \
	 && modules="${MODULES}" \
	 && if [ ! -z "${PROGRAM}" ] ; then \
	      modules="$${modules} $$( make -p | grep MODULES_${PROGRAM} | cut -d '=' -f 2 ) " \
	    ; fi \
	 && for m in $$modules ; do \
	      mdir=TACC_$${m}_DIR \
	       && mdir=$$( env | grep -i $${mdir} | cut -d = -f 2 ) \
	       && if [ -z "$${mdir}" ] ; then \
	            needs="$$needs $$m" \
	           ; \
	          fi \
	       ; \
	     done \
	     && if [ ! -z "$$needs" ] ; then \
	          echo "Please load modules: $$needs" \
	           && echo  \
	           && exit 1 \
	           ;  \
	        fi

%.o : %.c
	@if [ -z "${C_COMPILER}" ] ; then \
	    echo "Could not determine C compiler" && exit 1 ; fi
	@cmd="${C_COMPILER}   ${CFLAGS}   ${PIC_OPTION} ${EXTRA_INCLUDES} \
	        ${EXTRA_OPTIONS} ${EXTRA_EXTRA_OPTIONS} \
	    -c $^" \
	 && if [ "${ECHO}" = "1" ] ; then \
	        echo "Compile: $$cmd" ; fi \
	 && eval $${cmd}

%.o : %.cpp
	@program=$@ && program=$${program%%.o} \
	 && make --no-print-directory modules PROGRAM=$${program}
	@if [ -z "${CXX_COMPILER}" ] ; then \
	    echo "Could not determine CXX compiler" && exit 1 ; fi
	@cmd="${CXX_COMPILER} ${CXXFLAGS} ${PIC_OPTION} ${EXTRA_INCLUDES} \
	        ${EXTRA_OPTIONS} ${EXTRA_EXTRA_OPTIONS} \
	    -c $^" \
	 && if [ "${ECHO}" = "1" ] ; then \
	        echo "Compile: $$cmd" ; fi \
	 && eval $${cmd}

%.o : %.cxx 
	@program=$@ && program=$${program%%.o} \
	 && make --no-print-directory modules PROGRAM=$${program}
	@if [ -z "${CXX_COMPILER}" ] ; then \
	    echo "Could not determine CXX compiler" && exit 1 ; fi
	@cmd="${CXX_COMPILER} ${CXXFLAGS} ${PIC_OPTION} ${EXTRA_INCLUDES} \
	        ${EXTRA_OPTIONS} ${EXTRA_EXTRA_OPTIONS} \
	    -c $^" \
	 && if [ "${ECHO}" = "1" ] ; then \
	        echo "Compile: $$cmd" ; fi \
	 && eval $${cmd}

%.o : %.F90
	${F_COMPILER}   ${FFLAGS}   ${PIC_OPTION} ${INCLUDES} ${EXTRA_OPTIONS} ${EXTRA_EXTRA_OPTIONS} \
	    -c $^

.SECONDEXPANSION:
# use double colon to add more dependencies elsewhere
info ::
	@echo "for linking:"
	@echo "    [ EXTRA_LIBS=... ]"
${APPS} ${EXERCISES} ${PROGRAMS} ${WRONGS} :: $$@.o ${EXTRA_OBJS}
	@if [ ! -z "${LINK_SETUP_COMMANDS}" ] ; then \
	    if [ "${ECHO}" = "1" ] ; then echo ${LINK_SETUP_COMMANDS} ; fi \
	     && eval ${LINK_SETUP_COMMANDS} \
	    ; fi
	@if [ -z "${LINKER}" ] ; then \
	    echo "No linker defined for LANGUAGE=${LANGUAGE}" && exit 1 ; fi
	@if [ ! -z "${RPATH}" ] ; then \
	      for r in ${RPATH} ; do \
	          rpath="$$rpath -Wl,-rpath,$${r}" \
	      ; done \
	    ; fi \
	 && cmd="${LINKER} -o $@ $^ \
	        ${LINK_FLAGS} ${EXTRA_LINK_FLAGS} \
	        ${EXTRA_LIBS} $$rpath " \
	 && if [ "${ECHO}" = "1" ] ; then echo "Linking: $$cmd" ; fi \
	 && eval $$cmd
	@if [ "${ECHO}" = "1" -a ! -z "${LINK_EXTRA_COMMANDS}" ] ; then \
	    echo ${LINK_EXTRA_COMMANDS} \
	    ; fi \
	 && eval ${LINK_EXTRA_COMMANDS}
# ${APPS} ${PROGRAMS} ${WRONGS} : $$@.o ${EXTRA_OBJS}
# 	@if [ ! -z "${RPATH}" ] ; then \
# 	    for r in ${RPATH} ; do \
# 	        rpath="$$rpath -Wl,-rpath,$${r}" \
# 	    ; done \
# 	; fi \
# 	 && cmdline="${LINKER} ${LINKERFLAGS} $${rpath} \
# 	        -o $@ $^ ${EXTRALIBS}" \
# 	 && if [ "${ECHO}" = "1" ] ; then \
# 	        echo "Link line: $$cmdline" ; fi \
# 	 && eval $$cmdline


